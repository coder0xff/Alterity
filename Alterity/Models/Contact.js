/*Generated by SharpKit v4.29.7000*/
if(typeof(Alterity) == "undefined")
    Alterity = {};
if(typeof(Alterity.Models) == "undefined")
    Alterity.Models = {};
Alterity.Models.IntegerInterval = function()
{
};
Alterity.Models.IntegerInterval.prototype.get_Right = function()
{
    return this.Left + this.Length - 1;
};
Alterity.Models.IntegerInterval.prototype.set_Right = function(value)
{
    this.Length = value - this.Left + 1;
};
Alterity.Models.IntegerInterval = function(left,length)
{
    this.Left = left;
    this.Length = length;
};
Alterity.Models.IntegerInterval.prototype.InsertTransformSelection = function(Tranformer)
{
    if(Tranformer.Left <= this.Left)
    {
        return [new Alterity.Models.IntegerInterval(this.Left + Tranformer.Length,this.Length)];
    }
    else if(Tranformer.Left < this.Left + this.Length)
    {
        return [new Alterity.Models.IntegerInterval(this.Left,Tranformer.Left - this.Left),new Alterity.Models.IntegerInterval(Tranformer.Left + Tranformer.Length,this.Length - (Tranformer.Left - this.Left))];
    }
    else
    {
        return [this];
    }
};
Alterity.Models.IntegerInterval.prototype.DeleteTransformSelection = function(asInsertion)
{
    var leftShiftCount=System.Math.Max$$Int32$$Int32(0,System.Math.Min$$Int32$$Int32(this.Left - asInsertion.Left,asInsertion.Length));
    var upperBoundMin=System.Math.Min$$Int32$$Int32(this.Left + this.Length - 1,asInsertion.Left + asInsertion.Length - 1);
    var lowerBoundMax=System.Math.Max$$Int32$$Int32(this.Left,asInsertion.Left);
    var lengthReduction=(lowerBoundMax <= upperBoundMin)?System.Math.Max$$Int32$$Int32(upperBoundMin - lowerBoundMax + 1,0):0;
    var newLength=this.Length - lengthReduction;
    if(newLength > 0)
    {
        return [new Alterity.Models.IntegerInterval(this.Left - leftShiftCount,newLength)];
    }
    else
    {
        return [];
    }
};
Alterity.Models.IntegerInterval.prototype.InsertTransformInsertion = function(asInsertion)
{
    if(asInsertion.Left <= this.Left)
    {
        return [new Alterity.Models.IntegerInterval(this.Left + asInsertion.Length,this.Length)];
    }
    else
    {
        return [this];
    }
};
Alterity.Models.IntegerInterval.prototype.DeleteTransformInsertion = function(asDeletion)
{
    var leftShift=System.Math.Max$$Int32$$Int32(0,System.Math.Min$$Int32$$Int32(this.Left - asDeletion.Left,asDeletion.Length));
    return [new Alterity.Models.IntegerInterval(this.Left - leftShift,this.Length)];
};
Alterity.Models.IntegerInterval.prototype.InsertTransformInsertionSwappedPrecedence = function(asInsertion)
{
    if(asInsertion.Left < this.Left)
    {
        return [new Alterity.Models.IntegerInterval(this.Left + asInsertion.Length,this.Length)];
    }
    else
    {
        return [this];
    }
};
Alterity.Models.IntegerInterval.prototype.Intersection = function(other)
{
    var result=new Alterity.Models.IntegerInterval();
    if(other.get_Right() >= this.Left && other.Left <= this.get_Right())
    {
        result.Left = System.Math.Max$$Int32$$Int32(other.Left,this.Left);
        result.Length = System.Math.Min$$Int32$$Int32(other.get_Right(),this.get_Right()) - result.Left + 1;
    }
    else
    {
        result.Left = 0;
        result.Length = 0;
    }
    return result;
};
Alterity.Models.IntegerInterval.prototype.Union = function(other)
{
    var result=new Alterity.Models.IntegerInterval();
    if(other.get_Right() >= this.Left && other.Left <= this.get_Right())
    {
        result.Left = System.Math.Min$$Int32$$Int32(other.Left,this.Left);
        result.Length = System.Math.Max$$Int32$$Int32(other.get_Right(),this.get_Right()) - result.Left + 1;
    }
    else
    {
        result.Left = 0;
        result.Length = 0;
    }
    return result;
};
Alterity.Models.IntegerInterval.prototype.Subtract = function(other)
{
    if(other.get_Right() >= this.Left && other.Left <= this.get_Right())
    {
        var leftResultLength=System.Math.Max$$Int32$$Int32(other.Left - this.Left,0);
        var rightResultLength=System.Math.Max$$Int32$$Int32(this.get_Right() - other.get_Right(),0);
        if(leftResultLength + rightResultLength < this.Length)
        {
            if(leftResultLength > 0)
            {
                if(rightResultLength > 0)
                {
                    return [new Alterity.Models.IntegerInterval(this.Left,leftResultLength),new Alterity.Models.IntegerInterval(this.get_Right() - rightResultLength + 1,rightResultLength)];
                }
                else
                {
                    return [new Alterity.Models.IntegerInterval(this.Left,leftResultLength)];
                }
            }
            else
            {
                if(rightResultLength > 0)
                {
                    return [new Alterity.Models.IntegerInterval(this.get_Right() - rightResultLength + 1,rightResultLength)];
                }
                else
                {
                    return [];
                }
            }
        }
    }
    return [this];
};
